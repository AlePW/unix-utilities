#!/usr/bin/env ruby

require "pp"
require "pathname"

class SpeedUpMp3
  def initialize(factor)
    @factor = factor
  end
  def sox!(source, target)
    system *%W[sox --show-progress #{source} #{target} tempo -s #{@factor}]
  end
  def speedup_file!(source, target)
    target.dirname.mkpath
    sox!(source, target)
    # TODO: reapply id3 tags
  end
  def speedup_to_directory!(source, target)
    if Pathname(source).directory?
      source.children.each do |child|
        target_child = target+child.basename
        if child.directory?
          speedup_to_directory!(child, target_child)
        elsif child.extname =~ /\.mp3\z/i
          speedup_file!(child, target_child)
        end
      end
    else
      speedup_file!(source, target+source.basename)
    end
  end
  def run!(args)
    target = args.pop
    sources = args
    # TODO: Support autocreating target directory if it doesn't exist,
    #       and better error messages?
    if target.directory?
      sources.each do |source|
        speedup_to_directory!(source, target)
      end
    elsif sources.size == 1
      speedup_file!(sources[0], target)
    else
      STDERR.puts "#{target} must be a directory to speedup multiple source files to it"
      exit 1
    end
  end
end

speed = 1.4

if ARGV[0] =~ /\A-([\d\.]+)\z/
  speed = $1.to_f
  ARGV.shift
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} [-factor] file_in.mp3 file_out.mp3"
  STDERR.puts "       #{$0} [-factor] file1.mp3 file2.mp3 dir"
  STDERR.puts "       #{$0} [-factor] dir_in dir_out"
  STDERR.puts "Default factor is 1.4 (40% faster)"
  exit 1
end

SpeedUpMp3.new(speed).run!(ARGV.map{|x| Pathname(x)})
